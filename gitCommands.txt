git submodule add https://github.com/shahdqutp89/Development devolpment        #to add a submodule repo to the main repo
git submodule update --init --recursive                                        #To initialize and update submodules
git submodule update --remote                                                  #To update submodules to the latest version
git submodule update --remote --merge                                          #Update submodules
git pull origin main branchname                                                #To pull latest changes
git push origin main branchname                                                #To push your commits
git checkout -b branchname                                                     #create and switch to a new branch
git checkout main                                                              #switch back to main branch
git merge branchname                                                           #merging the main branch with another branch (but make sure that you are in the main branch when writing this command)
git rebase -i HEAD~3                                                           #squash last 3 commits into one
git branch                                                                     # Lists all local branches
git branch -d <branch-name>                                                    # Deletes the branch after it's merged
git branch -D <branch-name>                                                    # Force deletes the branch (even if not merged)
git branch -m <new-branch-name>                                                # Renames the current branch
git add <conflicted-file>                                                      # Mark file as resolved
git commit                                                                     # Complete the merge
git rebase main                                                                #Rebase the newbranch onto the main branch
git rebase --skip                                                              # Skip the current commit and continue rebasing

# Fix conflicts in the files manually
git add <resolved-file>                                                        # Stage the resolved file
git rebase --continue                                                          # Continue the rebase process

git rebase --abort                                                             # Abort the rebase process and return to the state before starting the rebase
git push --force                                                               # Push with force (because history was rewritten)


##################################################
# Git Squash: Rebase vs Merge (Short Version)
##################################################

# ðŸ”¹ SQUASH WITH REBASE (Local - Before PR)
# - Done locally using: git rebase -i HEAD~N
# - Rewrites commit history
# - Requires: git push --force
# - Useful for cleaning up before sharing code

# Example:
#   git rebase -i HEAD~3
#   # change picks to squash, save
#   git push --force

# ðŸ”¹ SQUASH WITH MERGE (GitHub - During PR)
# - Done on GitHub when merging a PR
# - All commits combined into one on main
# - No changes to feature branch
# - No force-push needed

# Steps:
#   git push origin feature/branch
#   # On GitHub â†’ Open PR â†’ "Squash and merge"

##############################################
# Key Differences
##############################################

# Where?
#   Rebase squash â†’ Local
#   Merge squash  â†’ GitHub

# When?
#   Rebase squash â†’ Before PR
#   Merge squash  â†’ During PR

# History?
#   Rebase â†’ Rewrites branch history
#   Merge â†’ Leaves branch history untouched

# Push?
#   Rebase â†’ Needs force-push
#   Merge  â†’ No force-push
##################################################
